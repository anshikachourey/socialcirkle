generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id
  displayName String?
  username    String?  @unique
  bio         String?
  photoURL    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  memberships ChatMember[]
  messages    Message[]
}

model Relationship {
  // “owner” perspective: ownerId keeps a doc about otherId
  ownerId   String
  otherId   String
  state     RelState
  direction Direction?  // only used if state = PENDING
  updatedAt DateTime    @updatedAt

  @@id([ownerId, otherId])
  @@index([ownerId])
}

enum RelState {
  PENDING
  ACCEPTED
  BLOCKED
}

enum Direction {
  OUTGOING
  INCOMING
}

model Chat {
  id           String      @id @default(cuid())
  title        String?
  isGroup      Boolean     @default(false)
  createdById  String
  participantIds String[]  // convenience list for quick queries
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  members  ChatMember[]
  messages Message[]
}

model ChatMember {
  chatId String
  userId String
  role   String   @default("member")
  joinedAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  senderId  String
  text      String
  createdAt DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [id])
}
